1、检查内核版本，必须是3.10及以上 
uname ‐r
2、安装docker 
yum install docker
3、输入y确认安装
4、启动docker
systemctl start docker
[root@localhost ~]# docker ‐v 
Docker version 1.12.6, build 3e8e77d/1.12.6
5、开机启动docker 
[root@localhost ~]# systemctl enable docker 
Created symlink from /etc/systemd/system/multi‐user.target.wants/docker.service to
/usr/lib/systemd/system/docker.service.
6、停止docker 
systemctl stop docker

docker基本命令：
查看所有镜像 docker images
删除镜像(会提示先停止使用中的容器) docker rmi  镜像name/镜像id
查看所有容器 docker ps -a
查看容器运行日志 docker logs 容器名称/容器id
停止容器运行 docker stop 容器name/容器id
终止容器后运行 docker start 容器name/容器id
容器重启 docker restart 容器name/容器id
删除容器 docker rm 容器name/容器id

Dockerfile保留关键字
FROM 基础镜像，当前新镜像是基于哪个镜像的
MAINTAINER 镜像维护者的姓名和邮箱地址
RUN  容器构建时需要运行的命令
EXPOSE  当前容器对外暴露出的端口
WORKDIR  指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点
ENV  用来在构建镜像过程中设置环境变量
ADD  将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包
COPY  类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中<源路径>的文件/目录复制到新的一层的镜像内的<目标路径>位置
VOLUME 容器数据卷，用于数据保存和持久化工作
CMD  指定一个容器启动时要运行的命令。Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被dockers run 之后的参数替换
ENTRYPOINT  指定一个容器启动时要运行的命令。ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数
ONBUILD  当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发

dockerfile文件样例
# volume test
FROM centos
VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]
CMD echo "finished,-----success1"
CMD /bin/bash

根据dockerfile文件生成镜像
docker build -f /mydocker/dockerfile2 -t qiwu/centos:1.0 .

容器数据卷继承
docker run -it --volumes-from dc01 --name dc02 d6646bc69b86

自定义centos
FROM centos
MAINTAINER qiwu<huangqiwu1990@163.com>
ENV mypath /usr/local
WORKDIR $mypath
RUN yum -y install vim
RUN yum -y install net-tools
EXPOSE 80
CMD /bin/bash

docker build -f /mydocker/Dockerfile -t qiwu/mycentos:1.0 .

#自定义tomcat
FROM qiwu/mycentos:1.0
MAINTAINER qiwu<huangqiwu1990@163.com>
#把JAVA与tomcat添加到容器中
ADD jdk-8u241-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.30.tar.gz /usr/local/
#配置Java与tomcat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_241
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.30
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.30
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin
EXPOSE 8080
#启动时运行tomcat
CMD $CATALINA_HOME/bin/startup.sh && tail -F $CATALINA_HOME/bin/logs/catalina.out

docker build -f /mydocker/mytomcat/Dockerfile -t qiwu/mytomcat:1.0
docker run -d -p 9080:8080 --name mytomcat9 -v /mydocker/mytomcat/test:/usr/local/apache-tomcat-9.0.30/webapps/test -v /mydocker/mytomcat/tomcat9logs:/usr/local/apache-tomcat-9.0.30/logs qiwu/mytomcat:1.0

自定义mycat1.6
FROM qiwu/mycentos:1.0
MAINTAINER qiwu<huangqiwu1990@163.com>
#把JAVA与mycat添加到容器中
ADD jdk-8u202-linux-x64.tar.gz /usr/local/
ADD Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz /usr/local/
#配置Java与mycat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_202
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
#ENV MYCAT_HOME /usr/local/mycat
ENV PATH $PATH:$JAVA_HOME/bin
EXPOSE 8066 9066
#启动时运行mycat
CMD /usr/local/mycat/bin/mycat console

docker build -f /opt/mycatDockerfile -t qiwu/mycat:1.0 .
docker run --name mycat02  --privileged=true -p 8066:8066 -p 9066:9066 -v /myspace/mycat02/conf:/usr/local/mycat/conf -v /myspace/mycat02/logs:/usr/local/mycat/logs -d qiwu/mycat:1.0

#redis
docker run -d -p 6379:6379 --name myredis01 -v /mydocker/myredis/data:/data -v /mydocker/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes

attach 用法

$ sudo docker attach 665b4a1e17b6 #by ID
or
$ sudo docker attach loving_heisenberg #by Name
$ root@665b4a1e17b6:/#

就是讲你当前terminal 的标准输入、输出、错误附加到制定的docker容器。
通俗来讲就是 当前终端里可以看到 ENTRYPOINT/CMD 进程的输出，你发送 CTRL-c 信号(输入) 直接会终止docker 运行。
如果 ENTRYPOINT/CMD 没有标准输出，那么attach 上去了，什么也没有，就好像假死了。

退出容器
exit  容器停止退出
ctrl+p+q  容器不停止退出
exec 用法
$ sudo docker exec -i -t 665b4a1e17b6 /bin/bash #by ID
or

$ sudo docker exec -i -t loving_heisenberg /bin/bash #by Name
$ root@665b4a1e17b6:/#

在docker 里面新开了一个bash 进程，在该终端可以通过命令和容器交互，类似于通过ssh和远程linux server 交互。

所以大多数情况，可以直接使用 docker exec 命令。

docker exec -i -t 9423836f63d5 /bin/bash
docker cp 25ea04f2beb6:/etc/nginx/nginx.conf /myspace/mynginx/conf
docker cp 25ea04f2beb6:/etc/nginx/conf.d/default.conf /myspace/mynginx/conf/conf.d/default.conf
mkdir conf html logs
docker run \
    --name mynginx3 \
    -p 80:80 \-v  /myspace/mynginx/conf/nginx.conf:/etc/nginx/nginx.conf \
    -v /myspace/mynginx/conf/conf.d/:/etc/nginx/conf.d  \
    -v /myspace/mynginx/logs/:/var/log/nginx \
    -v /myspace/mynginx/html/:/usr/share/nginx/html \
    -d nginx
    
